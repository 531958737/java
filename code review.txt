Code Review 实战总结
会议讨论：   
    上次讨论大家认为应该就是检查明显错误不入代码逻辑，明显的一些错误其实静态代码检查就可以做到，有些实践的用法可以找出来，
    比如对CopyOnWriteArrayList使用在并发环境数据要求实时而且读少写多，前提还是对其有深入理解。若只做到这一层我觉得还不够，
    要理解代码逻辑提出更好的设计
   
个人观点：  
     首先团队应该对Code Review达成目标一致，认识一致，我觉得最终目的应该是大家共同学习，提出好的实践建议，学习别人的思路，
    让自己代码水平提高，不仅能够写出整洁的代码，写出好的模式代码。大家不要对其认为是别人在挑自己的错误，自己的心态首先要保持
    不然会产生抗拒别人的建议。要让Code Review成为自己的习惯。
    
总结之前的一些实践：	
    1、统一编码规范、样式检查(checkstyle)、静态代码检查（PMD或者FindBug）、单元测试
    2、代码提交日志必须规范。提交功能与修复BUG必须区分开来
    3、代码提交尽量做到原子。
    4、代码提交截止时间（目前没有每日构建，定时构建当日代码）
    5、提交Code Review请求最好两个人最好主次搭配（主深入理解本次技术），并且备注需要着重阅读代码
    6、Code Review 人员不要固定
    7、Code Review 时间不能太长控制在半个小时内
    8、Code Review 审核人应该安排一个固定时间进行审核以免耽误自己工作，而且需要给别人反馈最后审核的时间
    9、利用工具进行评审，每隔段时间对提交的审核结果进行整理，梳理出最佳实践。
   10、每周每个人主持一次大型code review，不提代码编写人名字。（伤面子，呵呵！）
	    集体对代码进行点评好的地方、改进的地方
   11、需要理解别人代码才能找出设计漏洞
	是否在branch下建立一个主干分支，每个开发人员开发迭代需求的时候可以新拉分支独自开发，上线合并主干分支，响应快速迭代无需排队。
代码审查应该关注问题：
	1、是否能够正常工作
	2、代码是否可读
	3、有没有逻辑缺陷
	4、是否可以进行重构，是否有更好的实现
	5、单元测试代码逻辑是否覆盖
